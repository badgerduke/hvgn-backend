service: hvgn-backend

plugins:
  - serverless-offline
  - serverless-pseudo-parameters
  - serverless-domain-manager

custom:
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
  allowedOrigin:
    dev: "*"
    prod: "https://hvgn.net"
    other: "https://dev.hvgn.net"
  allowedMethods:
    - OPTIONS
    - GET
  customDomain: 
    domainName: api.hvgn.net
    basePath: '${opt:stage, self:provider.stage}'
    stage: ${opt:stage, self:provider.stage}
    certificateName: 'hvgn.net'
    createRoute53Record: true
    hostedZoneId: ZKLR5656MV2RR
  snsEmailSubscription:
    dev: erichamacher@protonmail.com
    prod: erichamacher@protonmail.com

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  stage: dev
  memorySize: 256
  timeout: 3
  environment:
    HVGN_TABLE: hvgn-${opt:stage, self:provider.stage}
    PRIVATE_YEAR: 1920
    ALLOWED_ORIGIN: ${self:custom.allowedOrigin.${opt:stage, self:provider.stage}, self:custom.allowedOrigin.other}

functions:
  getFamilyById:
    handler: get-family-by-id/get-family-by-id.handler
    role: getFamilyByIdExecutionRole
    events:
      - http:
          path: /family/{id}
          method: get
          cors:
            origin: ${self:custom.allowedOrigin.${opt:stage, self:provider.stage}, self:custom.allowedOrigin.other}
            headers: ${self:custom.allowedHeaders}
            methods: ${self:custom.allowedMethods}
    alarms:
      - functionErrors
  getIndividualById:
    handler: get-individual-by-id/get-individual-by-id.handler
    role: getIndividualByIdExecutionRole
    events:
      - http:
          path: /individual/{id}
          method: get
          cors:
            origin: ${self:custom.allowedOrigin.${opt:stage, self:provider.stage}, self:custom.allowedOrigin.other}
            headers: ${self:custom.allowedHeaders}
            methods: ${self:custom.allowedMethods}
    alarms:
      - functionErrors
resources:
  Resources:
    getFamilyByIdExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: GetFamilyByIdExecutionRole-${opt:stage, self:provider.stage}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: GetFamilyByIdExecutionPolicy-${opt:stage, self:provider.stage}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:CreateLogGroup
                  Resource: "arn:aws:logs:us-east-1:093879445146:log-group:/aws/lambda/hvgn-backend-${opt:stage, self:provider.stage}*:*"
                - Effect: Allow
                  Action: 
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:us-east-1:093879445146:log-group:/aws/lambda/hvgn-backend-${opt:stage, self:provider.stage}*:*:*"
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                  Resource: 
                    - "arn:aws:dynamodb:${opt:region, self:provider.region}:#{AWS::AccountId}:table/${self:provider.environment.HVGN_TABLE}"
    getIndividualByIdExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: GetIndividualByIdExecutionRole-${opt:stage, self:provider.stage}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: GetIndividualByIdExecutionPolicy-${opt:stage, self:provider.stage}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:CreateLogGroup
                  Resource: "arn:aws:logs:us-east-1:093879445146:log-group:/aws/lambda/hvgn-backend-${opt:stage, self:provider.stage}*:*"
                - Effect: Allow
                  Action: 
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:us-east-1:093879445146:log-group:/aws/lambda/hvgn-backend-${opt:stage, self:provider.stage}*:*:*"
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                  Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:#{AWS::AccountId}:table/${self:provider.environment.HVGN_TABLE}"
    ApiGateway4xxAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: hvgn-apigateway-${opt:stage, self:provider.stage}-4xx-alarm
        AlarmActions:
          - !Ref ApiGatewayAlarmSNSTopic
        MetricName: 4XXError
        Namespace: AWS/ApiGateway
        Dimensions:
          - Name: ApiName
            Value: ${opt:stage, self:provider.stage}-hvgn-backend
          - Name: Stage
            Value: ${opt:stage, self:provider.stage}
        ComparisonOperator: GreaterThanOrEqualToThreshold
        EvaluationPeriods: 1
        Period: 300
        Statistic: Maximum
        Threshold: 1
        TreatMissingData: notBreaching
    ApiGateway5xxAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: hvgn-apigateway-${opt:stage, self:provider.stage}-5xx-alarm
        AlarmActions:
          - !Ref ApiGatewayAlarmSNSTopic
        MetricName: 5XXError
        Namespace: AWS/ApiGateway
        Dimensions:
          - Name: ApiName
            Value: ${opt:stage, self:provider.stage}-hvgn-backend
          - Name: Stage
            Value: ${opt:stage, self:provider.stage}
        ComparisonOperator: GreaterThanOrEqualToThreshold
        EvaluationPeriods: 1
        Period: 300
        Statistic: Maximum
        Threshold: 1
        TreatMissingData: notBreaching
    ApiGatewayAlarmSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: hvgn-apigateway-${opt:stage, self:provider.stage}-topic
        Subscription:
          - Protocol: email
            Endpoint: ${self:custom.snsEmailSubscription.${opt:stage, self:provider.stage}}                         
