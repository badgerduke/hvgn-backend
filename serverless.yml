service: hvgn-backend

plugins:
  - serverless-offline
  - serverless-pseudo-parameters
  - serverless-domain-manager

custom:
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
    - X-Api-Key
  allowedOrigin:
    dev: "*"
    prod: "'https://dev.hvgn.net'"
    other: "'https://hvgn.net'"
  allowedMethods:
    - OPTIONS
    - GET
  customDomain: 
    domainName: api.hvgn.net
    basePath: '${opt:stage, self:provider.stage}'
    stage: ${opt:stage, self:provider.stage}
    certificateName: 'hvgn.net'
    createRoute53Record: true
    hostedZoneId: ZKLR5656MV2RR

provider:
  name: aws
  runtime: nodejs10.x
  region: us-east-1
  stage: dev
  memorySize: 128
  timeout: 3
  apiKeys:
    - dev:
      - value: ${ssm:/api.hvgn.net/dev/apikey~true}
        description: dev api key
    - prod:
      - value: ${ssm:/api.hvgn.net/prod/apikey~true}
        description: prod api key
  usagePlan:
    - dev:
        quota:
          limit: 1000
          #offset: 2
          period: MONTH
        #throttle:
          #burstLimit: 200
          #rateLimit: 100
    - prod:
        quota:
          limit: 1000
          #offset: 2
          period: MONTH
        #throttle:
          #burstLimit: 200
          #rateLimit: 100
  environment:
    INDIVIDUAL_TABLE: Individual-${opt:stage, self:provider.stage}
    FAMILY_TABLE: Family-${opt:stage, self:provider.stage}
    CHILDREN_TABLE: Children-${opt:stage, self:provider.stage}
    NOTE_TABLE: Note-${opt:stage, self:provider.stage}
    PRIVATE_YEAR: 1920
    ALLOWED_ORIGIN: ${self:custom.allowedOrigin.${opt:stage, self:provider.stage}, self:custom.allowedOrigin.other}

functions:
  getFamilyById:
    handler: get-family-by-id/get-family-by-id.handler
    role: getFamilyByIdExecutionRole
    events:
      - http:
          path: /family/{id}
          method: get
          private: true
          cors:
            origin: ${self:custom.allowedOrigin.${opt:stage, self:provider.stage}, self:custom.allowedOrigin.other}
            headers: ${self:custom.allowedHeaders}
            methods: ${self:custom.allowedMethods}
  getIndividualById:
    handler: get-individual-by-id/get-individual-by-id.handler
    role: getIndividualByIdExecutionRole
    events:
      - http:
          path: /individual/{id}
          method: get
          private: true
          cors:
            origin: ${self:custom.allowedOrigin.${opt:stage, self:provider.stage}, self:custom.allowedOrigin.other}
            headers: ${self:custom.allowedHeaders}
            methods: ${self:custom.allowedMethods}
resources:
  Resources:
    getFamilyByIdExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: GetFamilyByIdExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: GetFamilyByIdExecutionPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:CreateLogGroup
                  Resource: "arn:aws:logs:us-east-1:093879445146:log-group:/aws/lambda/hvgn-backend-dev*:*"
                - Effect: Allow
                  Action: 
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:us-east-1:093879445146:log-group:/aws/lambda/hvgn-backend-dev*:*:*"
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                  Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:#{AWS::AccountId}:table/${self:provider.environment.INDIVIDUAL_TABLE}"
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:Query
                  Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:#{AWS::AccountId}:table/${self:provider.environment.FAMILY_TABLE}" 
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                  Resource: 
                    - "arn:aws:dynamodb:${opt:region, self:provider.region}:#{AWS::AccountId}:table/${self:provider.environment.CHILDREN_TABLE}" 
                    - "arn:aws:dynamodb:${opt:region, self:provider.region}:#{AWS::AccountId}:table/${self:provider.environment.FAMILY_TABLE}/index/${self:provider.environment.FAMILY_TABLE}-fatherIdGSI"
                    - "arn:aws:dynamodb:${opt:region, self:provider.region}:#{AWS::AccountId}:table/${self:provider.environment.FAMILY_TABLE}/index/${self:provider.environment.FAMILY_TABLE}-motherIdGSI"
                    - "arn:aws:dynamodb:${opt:region, self:provider.region}:#{AWS::AccountId}:table/${self:provider.environment.CHILDREN_TABLE}/index/${self:provider.environment.CHILDREN_TABLE}-familyIdGSI"
    getIndividualByIdExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: GetIndividualByIdExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: GetIndividualByIdExecutionPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:CreateLogGroup
                  Resource: "arn:aws:logs:us-east-1:093879445146:log-group:/aws/lambda/hvgn-backend-dev*:*"
                - Effect: Allow
                  Action: 
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:us-east-1:093879445146:log-group:/aws/lambda/hvgn-backend-dev*:*:*"
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                  Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:#{AWS::AccountId}:table/${self:provider.environment.INDIVIDUAL_TABLE}"
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                  Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:#{AWS::AccountId}:table/${self:provider.environment.NOTE_TABLE}"          
